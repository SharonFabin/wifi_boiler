[{"C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\index.js":"1","C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\App.js":"3","C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\services\\Api.js":"4","C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\components\\DateTimer.js":"5","C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\services\\TimeConverter.js":"6","C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\config\\index.js":"7","C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\components\\TimeRangePicker.js":"8","C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\components\\TimerContent.js":"9"},{"size":517,"mtime":1607592903843,"results":"10","hashOfConfig":"11"},{"size":375,"mtime":1607592903844,"results":"12","hashOfConfig":"11"},{"size":4605,"mtime":1608035072721,"results":"13","hashOfConfig":"11"},{"size":795,"mtime":1607776765058,"results":"14","hashOfConfig":"11"},{"size":1284,"mtime":1608031860268,"results":"15","hashOfConfig":"11"},{"size":1085,"mtime":1608031860296,"results":"16","hashOfConfig":"11"},{"size":243,"mtime":1608031860288,"results":"17","hashOfConfig":"11"},{"size":2200,"mtime":1608035807168,"results":"18","hashOfConfig":"11"},{"size":228,"mtime":1608031860287,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"4o3kv8",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\index.js",[],["41","42"],"C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\App.js",["43","44","45","46","47"],"import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./App.css\";\r\nimport hot from \"./resources/hot.gif\";\r\nimport cold from \"./resources/freeze.gif\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { DatePicker } from \"antd\";\r\nimport {\r\n    Container,\r\n    Button,\r\n    Row,\r\n    Col,\r\n    Image,\r\n    ProgressBar,\r\n} from \"react-bootstrap\";\r\nimport DateTimer from \"./components/DateTimer.js\";\r\nimport { updateBoiler, closeBoiler } from \"./services/Api.js\";\r\nimport { timeToSeconds } from \"./services/TimeConverter.js\";\r\nimport config from \"./config/index.js\";\r\nimport TimeRangePicker from \"./components/TimeRangePicker\";\r\n\r\nfunction App() {\r\n    const [boiler, setBoiler] = useState({\r\n        open: false,\r\n        openDuration: 0,\r\n        lastOpened: 0,\r\n    });\r\n    const [listening, setListening] = useState(false);\r\n    const [variantState, setVariant] = useState(\"primary\");\r\n    const [statusImage, setStatusImage] = useState(cold);\r\n    const [chosenTime, setChosenTime] = useState(\"00:00:00\");\r\n    const [startTime, setStartTime] = useState(new Date());\r\n    const [stopTime, setStopTime] = useState(new Date());\r\n    const onChange = (date, dateString) => {\r\n        setChosenTime(dateString);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!listening) {\r\n            const events = new EventSource(\r\n                `http://${config.web.ip}:${config.web.server_port}/boiler/events`\r\n            );\r\n            events.onmessage = (event) => {\r\n                const parsedData = JSON.parse(event.data);\r\n                setBoiler(\r\n                    (boiler) =>\r\n                        (boiler = {\r\n                            open: false,\r\n                            openDuration: 0,\r\n                            lastOpened: 0,\r\n                        })\r\n                );\r\n                setBoiler((boiler) => (boiler = parsedData));\r\n                setVariant(parsedData.open ? \"danger\" : \"primary\");\r\n                setStatusImage(parsedData.open ? hot : cold);\r\n            };\r\n\r\n            setListening(true);\r\n        }\r\n    }, [listening, boiler]);\r\n\r\n    return (\r\n        <Container className=\"p-3 bg\">\r\n            <Row className=\"center\">\r\n                <Image src={statusImage} rounded className=\"status-image\" />\r\n            </Row>\r\n            <Row className=\"center spaced\">\r\n                <ProgressBar\r\n                    now={100}\r\n                    label={`${100}%`}\r\n                    animated\r\n                    variant={variantState}\r\n                />\r\n            </Row>\r\n            <Row className=\"center\">\r\n                <div className=\"content\">\r\n                    <DateTimer\r\n                        startTime={boiler.lastOpened}\r\n                        timerDuration={boiler.openDuration}\r\n                    />\r\n                </div>\r\n            </Row>\r\n            <Row className=\"center spaced\">\r\n                <Button\r\n                    type=\"button\"\r\n                    className=\"btn btn-danger btn-circle btn-lg\"\r\n                    onClick={() => updateBoiler(1800)}\r\n                >\r\n                    30\r\n                </Button>\r\n                <Button\r\n                    type=\"button\"\r\n                    className=\"btn btn-warning btn-circle btn-lg\"\r\n                    onClick={() => updateBoiler(900)}\r\n                >\r\n                    15\r\n                </Button>\r\n                <Button\r\n                    type=\"button\"\r\n                    className=\"btn btn-info btn-circle btn-lg\"\r\n                    onClick={() => updateBoiler(300)}\r\n                >\r\n                    5\r\n                </Button>\r\n            </Row>\r\n            <Row className=\"center spaced\">\r\n                {/* <DatePicker picker=\"time\" onChange={onChange} /> */}\r\n                <TimeRangePicker\r\n                    onChangeFrom={setStartTime}\r\n                    onChangeTo={setStopTime}\r\n                />\r\n            </Row>\r\n            <Row className=\"center spaced\">\r\n                <Button\r\n                    className=\"button-space\"\r\n                    variant=\"primary\"\r\n                    onClick={() => closeBoiler()}\r\n                >\r\n                    לסגור\r\n                </Button>\r\n                <Button\r\n                    className=\"button-space\"\r\n                    variant=\"danger\"\r\n                    onClick={() => updateBoiler(timeToSeconds(chosenTime))}\r\n                >\r\n                    לפתוח\r\n                </Button>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\services\\Api.js",[],"C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\components\\DateTimer.js",["48"],"import { useState, useEffect } from \"react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport TimerContent from \"./TimerContent.js\";\r\nimport {\r\n    secondsToDate,\r\n    calcRemainingSeconds,\r\n} from \"../services/TimeConverter.js\";\r\n\r\nconst timerProps = {\r\n    isPlaying: true,\r\n};\r\n\r\nconst DateTimer = (props) => {\r\n    const [startTime, setStartTime] = useState(props.startTime);\r\n    const [timerDuration, setTimerDuration] = useState(props.timerDuration);\r\n    useEffect(() => {\r\n        setStartTime(props.startTime);\r\n        setTimerDuration(props.timerDuration);\r\n    }, [props.timerDuration]);\r\n    return (\r\n        <CountdownCircleTimer\r\n            {...timerProps}\r\n            colors={[\r\n                [\"#004777\", 0.33],\r\n                [\"#F7B801\", 0.33],\r\n                [\"#A30000\", 0.33],\r\n            ]}\r\n            duration={timerDuration}\r\n            initialRemainingTime={calcRemainingSeconds(\r\n                startTime,\r\n                timerDuration\r\n            )}\r\n            onComplete={(totalElapsedTime) => []}\r\n            key={startTime + timerDuration}\r\n        >\r\n            {({ remainingTime }) => TimerContent(secondsToDate(remainingTime))}\r\n        </CountdownCircleTimer>\r\n    );\r\n};\r\n\r\nexport default DateTimer;\r\n","C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\services\\TimeConverter.js",[],"C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\config\\index.js",[],"C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\components\\TimeRangePicker.js",["49","50","51"],"C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\components\\TimerContent.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":7,"column":10,"nodeType":"58","messageId":"59","endLine":7,"endColumn":20},{"ruleId":"56","severity":1,"message":"60","line":12,"column":5,"nodeType":"58","messageId":"59","endLine":12,"endColumn":8},{"ruleId":"56","severity":1,"message":"61","line":32,"column":12,"nodeType":"58","messageId":"59","endLine":32,"endColumn":21},{"ruleId":"56","severity":1,"message":"62","line":33,"column":12,"nodeType":"58","messageId":"59","endLine":33,"endColumn":20},{"ruleId":"56","severity":1,"message":"63","line":34,"column":11,"nodeType":"58","messageId":"59","endLine":34,"endColumn":19},{"ruleId":"64","severity":1,"message":"65","line":19,"column":8,"nodeType":"66","endLine":19,"endColumn":29,"suggestions":"67"},{"ruleId":"56","severity":1,"message":"68","line":1,"column":20,"nodeType":"58","messageId":"59","endLine":1,"endColumn":29},{"ruleId":"56","severity":1,"message":"69","line":4,"column":26,"nodeType":"58","messageId":"59","endLine":4,"endColumn":35},{"ruleId":"56","severity":1,"message":"70","line":6,"column":8,"nodeType":"58","messageId":"59","endLine":6,"endColumn":17},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'DatePicker' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'startTime' is assigned a value but never used.","'stopTime' is assigned a value but never used.","'onChange' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.startTime'. Either include it or remove the dependency array. If 'setStartTime' needs the current value of 'props.startTime', you can also switch to useReducer instead of useState and read 'props.startTime' in the reducer.","ArrayExpression",["73"],"'useEffect' is defined but never used.","'withTheme' is defined but never used.","'lightBlue' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"74","fix":"75"},"Update the dependencies array to be: [props.startTime, props.timerDuration]",{"range":"76","text":"77"},[606,627],"[props.startTime, props.timerDuration]"]