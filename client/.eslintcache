[{"C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\index.js":"1","C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\App.js":"2","C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\components\\DateTimer.js":"4","C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\services\\Api.js":"5","C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\services\\TimeConverter.js":"6","C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\components\\TimerContent.js":"7"},{"size":517,"mtime":1607592903843,"results":"8","hashOfConfig":"9"},{"size":3495,"mtime":1607774141002,"results":"10","hashOfConfig":"9"},{"size":375,"mtime":1607592903844,"results":"11","hashOfConfig":"9"},{"size":1241,"mtime":1607774110966,"results":"12","hashOfConfig":"9"},{"size":380,"mtime":1607769977838,"results":"13","hashOfConfig":"9"},{"size":883,"mtime":1607773372144,"results":"14","hashOfConfig":"9"},{"size":275,"mtime":1607768846877,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"4o3kv8",{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\index.js",[],["35","36"],"C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\App.js",["37","38","39","40"],"import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./App.css\";\r\nimport hot from \"./resources/hot.gif\";\r\nimport cold from \"./resources/freeze.gif\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { DatePicker } from \"antd\";\r\nimport {\r\n    Jumbotron,\r\n    Container,\r\n    Button,\r\n    Row,\r\n    Col,\r\n    Image,\r\n    ProgressBar,\r\n} from \"react-bootstrap\";\r\nimport DateTimer from \"./components/DateTimer.js\";\r\nimport { updateBoiler } from \"./services/Api.js\";\r\nimport { timeToSeconds } from \"./services/TimeConverter.js\";\r\n\r\nfunction App() {\r\n    const [boiler, setBoiler] = useState({\r\n        open: false,\r\n        openDuration: 0,\r\n        lastOpened: 0,\r\n    });\r\n    const [listening, setListening] = useState(false);\r\n    const [variantState, setVariant] = useState(\"primary\");\r\n    const [chosenTime, setChosenTime] = useState(\"00:00:00\");\r\n    const onChange = (date, dateString) => {\r\n        setChosenTime(dateString);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!listening) {\r\n            const events = new EventSource(\r\n                \"http://localhost:9000/boiler/events\"\r\n            );\r\n            events.onmessage = (event) => {\r\n                const parsedData = JSON.parse(event.data);\r\n                setBoiler((boiler) => (boiler = parsedData));\r\n            };\r\n\r\n            setListening(true);\r\n        }\r\n    }, [listening, boiler]);\r\n\r\n    return (\r\n        <Container className=\"p-3 bg\">\r\n            <Row className=\"center\">\r\n                <Image src={cold} rounded className=\"status-image\" />\r\n            </Row>\r\n            <Row className=\"progress spaced\">\r\n                <ProgressBar\r\n                    now={30}\r\n                    label={`${30}%`}\r\n                    animated\r\n                    variant={variantState}\r\n                />\r\n            </Row>\r\n            <Row className=\"center\">\r\n                <div className=\"content\">\r\n                    <DateTimer\r\n                        startTime={boiler.lastOpened}\r\n                        timerDuration={boiler.openDuration}\r\n                    />\r\n                </div>\r\n            </Row>\r\n            <Row className=\"center spaced\">\r\n                <Button\r\n                    type=\"button\"\r\n                    className=\"btn btn-danger btn-circle btn-lg\"\r\n                >\r\n                    30\r\n                </Button>\r\n                <Button\r\n                    type=\"button\"\r\n                    className=\"btn btn-warning btn-circle btn-lg\"\r\n                >\r\n                    15\r\n                </Button>\r\n                <Button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary btn-circle btn-lg\"\r\n                >\r\n                    5\r\n                </Button>\r\n            </Row>\r\n            <Row className=\"center spaced\">\r\n                <DatePicker picker=\"time\" onChange={onChange} />\r\n            </Row>\r\n            <Row className=\"center spaced\">\r\n                <Button\r\n                    className=\"button-space\"\r\n                    variant=\"danger\"\r\n                    onClick={() => updateBoiler(timeToSeconds(chosenTime))}\r\n                >\r\n                    Start\r\n                </Button>\r\n                <Button className=\"button-space\" variant=\"primary\">\r\n                    {boiler.open} : {boiler.openDuration} : {boiler.lastOpened}\r\n                </Button>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\components\\DateTimer.js",["41"],"import { useState, useEffect } from \"react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport TimerContent from \"./TimerContent.js\";\r\nimport { calcRemainingSeconds } from \"../services/TimeConverter.js\";\r\n\r\nconst timerProps = {\r\n    isPlaying: true,\r\n};\r\n\r\nconst DateTimer = (props) => {\r\n    const [startTime, setStartTime] = useState(props.startTime);\r\n    const [timerDuration, setTimerDuration] = useState(props.timerDuration);\r\n    useEffect(() => {\r\n        setStartTime(props.startTime);\r\n        setTimerDuration(props.timerDuration);\r\n    }, [props.timerDuration]);\r\n    return (\r\n        <CountdownCircleTimer\r\n            {...timerProps}\r\n            colors={[\r\n                [\"#004777\", 0.33],\r\n                [\"#F7B801\", 0.33],\r\n                [\"#A30000\", 0.33],\r\n            ]}\r\n            duration={timerDuration}\r\n            initialRemainingTime={calcRemainingSeconds(\r\n                startTime,\r\n                timerDuration\r\n            )}\r\n            onComplete={(totalElapsedTime) => []}\r\n            key={timerDuration}\r\n        >\r\n            {({ remainingTime }) => TimerContent(\"seconds\", remainingTime)}\r\n        </CountdownCircleTimer>\r\n    );\r\n};\r\n\r\nexport default DateTimer;\r\n","C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\services\\Api.js",[],"C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\services\\TimeConverter.js",["42"],"const minuteSeconds = 60;\r\nconst hourSeconds = 3600;\r\nconst getTimeSeconds = (time) => (minuteSeconds - time / 1000) | 0;\r\nconst getTimeMinutes = (time) => ((time % hourSeconds) / minuteSeconds) | 0;\r\nconst timeToSeconds = (time) => {\r\n    if (time != null && time.length == 8) {\r\n        try {\r\n            let hours = parseInt(time.substring(0, 2), 10);\r\n            let minutes = parseInt(time.substring(3, 5), 10);\r\n            let seconds = parseInt(time.substring(6), 10);\r\n            return hours * 60 * 60 + minutes * 60 + seconds;\r\n        } catch (e) {\r\n            return 0;\r\n        }\r\n    }\r\n    return 0;\r\n};\r\nconst calcRemainingSeconds = (start, duration) => {\r\n    const remainingTime = duration - (Date.now() - start) / 1000;\r\n    return remainingTime > 0 ? remainingTime : 0;\r\n};\r\n\r\nexport { getTimeSeconds, getTimeMinutes, timeToSeconds, calcRemainingSeconds };\r\n","C:\\Users\\Sharon\\Documents\\Programming\\NodeJS\\wifi_boiler\\client\\src\\components\\TimerContent.js",[],["43","44"],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":4,"column":8,"nodeType":"51","messageId":"52","endLine":4,"endColumn":11},{"ruleId":"49","severity":1,"message":"53","line":9,"column":5,"nodeType":"51","messageId":"52","endLine":9,"endColumn":14},{"ruleId":"49","severity":1,"message":"54","line":13,"column":5,"nodeType":"51","messageId":"52","endLine":13,"endColumn":8},{"ruleId":"49","severity":1,"message":"55","line":28,"column":26,"nodeType":"51","messageId":"52","endLine":28,"endColumn":36},{"ruleId":"56","severity":1,"message":"57","line":16,"column":8,"nodeType":"58","endLine":16,"endColumn":29,"suggestions":"59"},{"ruleId":"60","severity":1,"message":"61","line":6,"column":37,"nodeType":"62","messageId":"63","endLine":6,"endColumn":39},{"ruleId":"45","replacedBy":"64"},{"ruleId":"47","replacedBy":"65"},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'hot' is defined but never used.","Identifier","unusedVar","'Jumbotron' is defined but never used.","'Col' is defined but never used.","'setVariant' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.startTime'. Either include it or remove the dependency array. If 'setStartTime' needs the current value of 'props.startTime', you can also switch to useReducer instead of useState and read 'props.startTime' in the reducer.","ArrayExpression",["68"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["66"],["67"],"no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},"Update the dependencies array to be: [props.startTime, props.timerDuration]",{"range":"71","text":"72"},[579,600],"[props.startTime, props.timerDuration]"]